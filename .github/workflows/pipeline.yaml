name: Python CI Pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  
permissions:
  contents: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
        DISPLAY: ':99.0'


    steps:
    # Step 1: Check out the repository code
    - name: Check out code
      uses: actions/checkout@v3

    # Step 2: Set up Python environment
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - uses: tlambert03/setup-qt-libs@v1
    - name: build "display"
      run: |
        /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1920x1200x24 -ac +extension GLX

    # Step 3: Install system dependencies for PyQt (OpenGL and Xvfb for headless mode)
    - name: Install system dependencies
      run: |
        pip install -r requirements.txt
        sudo apt install -y xvfb x11-utils libxkbcommon-x11-0
        python -m pip install --upgrade pip
        pip install pyside2 pytest coverage pytest-qt
  
    # Step 5: Run tests with Xvfb (for headless PyQt)
    - name: Run Unit Tests
      run: |
        pytest

  generate-exe:
    runs-on: windows-latest
    needs: build-and-test
    env:
      DISPLAY: ':99.0'

    steps:
      # Step 1: Check out the repository code
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Install dependencies including Pillow
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest coverage pytest-qt pillow

      # Step 3: Build with PyInstaller using .ico file for Windows
      - name: Build with PyInstaller
        run: |
          pyinstaller --onefile --windowed --icon=app-icon.ico main.py

      # Step 4: Create Zip Archive for Windows
      - name: Create Zip Archive for Windows
        run: |
          Compress-Archive -Path './dist/*' -DestinationPath 'my-windows-artifact.zip'

      # Step 5: Upload Windows Artifact
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-artifact
          path: my-windows-artifact.zip
      
  generate-app-intel:
    runs-on: macos-13
    needs: build-and-test
    steps:
      # Step 1: Check out the repository code
      - name: Check out code
        uses: actions/checkout@v3

      # Step 2: Set up Python 3.12
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest coverage pytest-qt PyQt6 pyinstaller

      # Step 4: Build the .app using PyInstaller for Intel
      - name: Build macOS .app for Intel using PyInstaller
        run: |
          python -m PyInstaller --onedir --windowed --icon=app-icon.icns --target-arch x86_64 main.py

      # Step 5: Create Zip Archive for the .app
      - name: Create Zip Archive for Intel
        run: |
          zip -r my-macos-app-intel.zip dist/*.app

      # Step 6: Upload macOS Intel Artifact
      - name: Upload macOS Intel Artifact
        uses: actions/upload-artifact@v3
        with:
          name: macos-artifact-intel
          path: my-macos-app-intel.zip
        
  generate-app-apple-silicon:
    runs-on: macos-latest
    needs: build-and-test
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # Set up Python for Apple Silicon architecture
      - name: Set up Python 3.9 for Apple Silicon
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          architecture: 'arm64'  # Apple Silicon用

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install py2app pytest coverage pytest-qt

      - name: Build macOS .app for Apple Silicon
        run: |
          python setup_apple_silicon.py py2app

      - name: Create Zip Archive for Apple Silicon
        run: |
          zip -r my-macos-app-apple-silicon.zip dist/*.app

      - name: Upload Apple Silicon macOS Artifact
        uses: actions/upload-artifact@v3
        with:
          name: macos-artifact-apple-silicon
          path: my-macos-app-apple-silicon.zip

  create-release:
    runs-on: ubuntu-latest
    needs: [generate-exe, generate-app-intel, generate-app-apple-silicon]
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/')
    steps:
      # Step 1: Check out the repository code
      - name: Check out code
        uses: actions/checkout@v3

      # Step 2: Download Windows Artifact
      - name: Download Windows Artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-artifact
          path: ./  # ダウンロード場所を指定

      # Step 3: Download macOS Intel Artifact
      - name: Download macOS Intel Artifact
        uses: actions/download-artifact@v3
        with:
          name: macos-artifact-intel
          path: ./  # ダウンロード場所を指定

      # Step 4: Download macOS Apple Silicon Artifact
      - name: Download macOS Apple Silicon Artifact
        uses: actions/download-artifact@v3
        with:
          name: macos-artifact-apple-silicon
          path: ./  # ダウンロード場所を指定

      # Step 5: Generate a Unique Tag Name
      - name: Generate Tag Name
        id: generate_tag
        shell: bash
        run: echo "TAG=v0.0.$GITHUB_RUN_NUMBER" >> $GITHUB_OUTPUT

      # Step 6: Create and Push Tag
      - name: Create and Push Tag
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag ${{ steps.generate_tag.outputs.TAG }} -a -m "Release ${{ steps.generate_tag.outputs.TAG }}"
          git push origin ${{ steps.generate_tag.outputs.TAG }}

      # Step 7: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.generate_tag.outputs.TAG }}
          release_name: Release ${{ steps.generate_tag.outputs.TAG }}
          body: |
            Changes in this Release
            - Windows Executable
            - macOS Intel Build
            - macOS Apple Silicon Build
          draft: false
          prerelease: false

      # Step 8: Upload Windows Artifact as Release Asset
      - name: Upload Windows Artifact as Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./my-windows-artifact.zip
          asset_name: windows-artifact.zip
          asset_content_type: application/zip

      # Step 9: Upload macOS Intel Artifact as Release Asset
      - name: Upload macOS Intel Artifact as Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./my-macos-app-intel.zip
          asset_name: macos-artifact-intel.zip
          asset_content_type: application/zip

      # Step 10: Upload macOS Apple Silicon Artifact as Release Asset
      - name: Upload macOS Apple Silicon Artifact as Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./my-macos-app-apple-silicon.zip
          asset_name: macos-artifact-apple-silicon.zip
          asset_content_type: application/zip

          ##still it doesn't work in intel mac
