name: Python CI Pipeline

on:
  push:
    branches:
      - '**'  # This triggers the pipeline on a push to any branch
  pull_request:
    branches:
      - '**'  # This triggers the pipeline on any pull request

permissions:
  contents: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
        DISPLAY: ':99.0'


    steps:
    # Step 1: Check out the repository code
    - name: Check out code
      uses: actions/checkout@v3

    # Step 2: Set up Python environment
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - uses: tlambert03/setup-qt-libs@v1
    - name: build "display"
      run: |
        /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1920x1200x24 -ac +extension GLX

    # Step 3: Install system dependencies for PyQt (OpenGL and Xvfb for headless mode)
    - name: Install system dependencies
      run: |
        pip install -r requirements.txt
        sudo apt install -y xvfb x11-utils libxkbcommon-x11-0
        python -m pip install --upgrade pip
        pip install pyside2 pytest coverage pytest-qt
  
    # Step 5: Run tests with Xvfb (for headless PyQt)
    - name: Run Unit Tests
      run: |
        pytest

  generate-exe:
    runs-on: ubuntu-latest
    needs: build-and-test  # This ensures that generate-exe depends on build-and-test
    env:
      DISPLAY: ':99.0'

    steps:
      # Step 1: Check out the repository code
    - name: Check out code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    # Step 2: Install system dependencies and requirements
    - name: Install dependencies
      run: |
        sudo apt install -y xvfb x11-utils libxkbcommon-x11-0
        pip install -r requirements.txt
        python -m pip install --upgrade pip
        pip install pyside2 pytest coverage pytest-qt

    - name: PyInstaller Action
      uses: Martin005/pyinstaller-action@v1.2.0
      with:
        spec: main.spec  # Path to your .py or .spec file
        requirements: requirements.txt  # Path to your requirements.txt file
        python_ver: '3.9'  # Specific Python version to use
        exe_path: './dist'  # Where the executable will be stored
        upload_exe_with_name: 'BestTodo'  # The name of the uploaded artifact (optional)

    # Add this step to create the zip file
    - name: Create Zip Archive
      run: |
        zip -r my-artifact.zip ./dist/*

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: false
        prerelease: false

    # Step 5: Upload the generated executable to the release
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./my-artifact.zip
        asset_name: my-artifact.zip
        asset_content_type: application/zip