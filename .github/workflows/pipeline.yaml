name: Python CI Pipeline

on:
  push:
    branches:
      - '**'  # This triggers the pipeline on a push to any branch
  pull_request:
    branches:
      - '**'  # This triggers the pipeline on any pull request

permissions:
  contents: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
        DISPLAY: ':99.0'


    steps:
    # Step 1: Check out the repository code
    - name: Check out code
      uses: actions/checkout@v3

    # Step 2: Set up Python environment
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - uses: tlambert03/setup-qt-libs@v1
    - name: build "display"
      run: |
        /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1920x1200x24 -ac +extension GLX

    # Step 3: Install system dependencies for PyQt (OpenGL and Xvfb for headless mode)
    - name: Install system dependencies
      run: |
        pip install -r requirements.txt
        sudo apt install -y xvfb x11-utils libxkbcommon-x11-0
        python -m pip install --upgrade pip
        pip install pyside2 pytest coverage pytest-qt
  
    # Step 5: Run tests with Xvfb (for headless PyQt)
    - name: Run Unit Tests
      run: |
        pytest

  generate-exe-and-publish-release: 
    runs-on: windows-latest
    needs: build-and-test
    env:
      DISPLAY: ':99.0'

    steps:
      # Step 1: Check out the repository code
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Install system dependencies and requirements
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          python -m pip install --upgrade pip
          pip install pytest coverage pytest-qt
    
      # Step 3: Build Windows executable
      - name: PyInstaller Action
        uses: Martin005/pyinstaller-action@v1.2.0
        with:
          spec: main.spec
          requirements: requirements.txt
          python_ver: '3.9'
          exe_path: './dist'
          upload_exe_with_name: 'BestTodo'

      # Step 4: Create Zip Archive for Windows
      - name: Create Zip Archive (Windows)
        run: |
          Compress-Archive -Path './dist/*' -DestinationPath './my-windows-artifact.zip'

      # Step 5: Generate a unique tag name for Windows release
      - name: Generate Tag Name (Windows)
        id: generate_tag_win
        run: echo "TAG=v0.0.$GITHUB_RUN_NUMBER-win" >> $GITHUB_ENV

      # Step 6: Create and Push Tag for Windows
      - name: Create and Push Tag (Windows)
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag ${{ env.TAG }} -a -m "Release ${{ env.TAG }}"
          git push origin ${{ env.TAG }}

      # Step 7: Create GitHub Release for Windows
      - name: Create GitHub Release (Windows)
        id: create_release_win
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          release_name: "Release ${{ env.TAG }}"
          draft: false
          prerelease: false

      # Step 8: Upload Windows zip file as a release asset
      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_win.outputs.upload_url }}
          asset_path: ./my-windows-artifact.zip
          asset_name: my-windows-artifact.zip
          asset_content_type: application/zip

  generate-macos-app-release:
    runs-on: macos-latest
    needs: build-and-test

    steps:
      # Step 1: Check out the repository code
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Install Python dependencies
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          python -m pip install --upgrade pip
          pip install pytest coverage pytest-qt

      # Step 3: Install pyinstaller for macOS
      - name: Install pyinstaller
        run: |
          python -m pip install pyinstaller

      # Step 4: Build macOS app (Intel only)
      - name: PyInstaller for macOS (Intel only)
        run: |
          pyinstaller --onefile --windowed --icon "" main.py

      # Step 5: Create Zip Archive for macOS
      - name: Create Zip Archive (macOS)
        run: |
          zip -r ./my-macos-artifact.zip dist

      # Step 6: Generate a unique tag name for macOS release
      - name: Generate Tag Name (macOS)
        id: generate_tag_mac
        run: echo "TAG=v0.0.$GITHUB_RUN_NUMBER-mac" >> $GITHUB_ENV

      # Step 7: Create and Push Tag for macOS
      - name: Create and Push Tag (macOS)
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag ${{ env.TAG }} -a -m "Release ${{ env.TAG }}"
          git push origin ${{ env.TAG }}

      # Step 8: Create GitHub Release for macOS
      - name: Create GitHub Release (macOS)
        id: create_release_mac
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          release_name: "Release ${{ env.TAG }}"
          draft: false
          prerelease: false

      # Step 9: Upload macOS zip file as a release asset
      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_mac.outputs.upload_url }}
          asset_path: ./my-macos-artifact.zip
          asset_name: my-macos-artifact.zip
          asset_content_type: application/zip