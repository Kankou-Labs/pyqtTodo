name: Python CI Pipeline

on:
  push:
    branches:
      - '**'  # This triggers the pipeline on a push to any branch
  pull_request:
    branches:
      - '**'  # This triggers the pipeline on any pull request

permissions:
  contents: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
        DISPLAY: ':99.0'


    steps:
    # Step 1: Check out the repository code
    - name: Check out code
      uses: actions/checkout@v3

    # Step 2: Set up Python environment
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - uses: tlambert03/setup-qt-libs@v1
    - name: build "display"
      run: |
        /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1920x1200x24 -ac +extension GLX

    # Step 3: Install system dependencies for PyQt (OpenGL and Xvfb for headless mode)
    - name: Install system dependencies
      run: |
        pip install -r requirements.txt
        sudo apt install -y xvfb x11-utils libxkbcommon-x11-0
        python -m pip install --upgrade pip
        pip install pyside2 pytest coverage pytest-qt
  
    # Step 5: Run tests with Xvfb (for headless PyQt)
    - name: Run Unit Tests
      run: |
        pytest

  generate-windows:
    runs-on: windows-latest
    needs: build-and-test  # This ensures that generate-exe depends on build-and-test-
    env:
      DISPLAY: ':99.0'

    steps:
      # Step 1: Check out the repository code
    - name: Check out code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    # Step 2: Install system dependencies and requirements
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        python -m pip install --upgrade pip
        pip install pyside2 pytest coverage pytest-qt

    - name: PyInstaller Action
      uses: Martin005/pyinstaller-action@v1.2.0
      with:
        spec: main.spec  # Path to your .py or .spec file
        requirements: requirements.txt  # Path to your requirements.txt file
        python_ver: '3.9'  # Specific Python version to use
        exe_path: './dist'  # Where the executable will be stored
        upload_exe_with_name: 'BestTodo'  # The name of the uploaded artifact (optional)

    # Add this step to create the zip file
    - name: Create Zip Archive
      run: |
        Compress-Archive -Path './dist/*' -DestinationPath 'my-artifact.zip'

    # Upload Windows artifact
    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v3
      with:
        name: windows-artifact
        path: my-windows-app.zip

  generate-macos:
    runs-on: macos-latest
    needs: build-and-test
    steps:
    # Step 1: Check out the repository code
    - name: Check out code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Step 2: Set up Python environment on macOS
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # Step 3: Install macOS system dependencies
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        python -m pip install --upgrade pip
        pip install pyside6 pytest coverage pytest-qt

    - name: PyInstaller for macOS
      run: |
        pip install pyinstaller
        pyinstaller main.spec

    # Create zip archive of macOS app
    - name: Create Zip Archive
      run: |
        zip -r my-macos-app.zip ./dist

    # Upload macOS artifact
    - name: Upload macOS Artifact
      uses: actions/upload-artifact@v3
      with:
        name: macos-artifact
        path: my-macos-app.zip

  release-zip:
    runs-on: ubuntu-latest
    needs: [generate-windows, generate-macos]
    steps:
    # Step 1: Download both artifacts (Windows and macOS)
    - name: Download Windows Artifact
      uses: actions/download-artifact@v3
      with:
        name: windows-artifact

    - name: Download macOS Artifact
      uses: actions/download-artifact@v3
      with:
        name: macos-artifact

    # Step 2: Generate a unique tag name
    - name: Generate Tag Name
      id: generate_tag
      shell: bash
      run: echo "TAG=v0.0.$GITHUB_RUN_NUMBER" >> $GITHUB_OUTPUT

    # Step 3: Create and push the tag
    - name: Create and Push Tag
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"
        git tag ${{ steps.generate_tag.outputs.TAG }} -a -m "Release ${{ steps.generate_tag.outputs.TAG }}"
        git push origin ${{ steps.generate_tag.outputs.TAG }}
  
    # Step 4: Create GitHub Release
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.generate_tag.outputs.TAG }}
        release_name: Release ${{ steps.generate_tag.outputs.TAG }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: false
        prerelease: false

    # Step 5: Upload the Windows zip file as a release asset
    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./my-windows-app.zip
        asset_name: my-windows-app.zip
        asset_content_type: application/zip

    # Step 6: Upload the macOS zip file as a release asset
    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./my-macos-app.zip
        asset_name: my-macos-app.zip
        asset_content_type: application/zip

